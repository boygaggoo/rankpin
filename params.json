{"name":"Rankpin","tagline":"Unity RankPin","body":"# Introduction\r\n\r\n RankPin is designed to easily apply a ranking system with a simple setting in Unity. It provides a cost efficient method to simplify and speed up the process of Unity application and game development process. With a few clicks you will be able to apply a game ranking system.\r\n\r\n\r\n# Functions of RankPin\r\n\r\n There are two functions of RankPin. First is to save data onto the server and the second to retrieve the saved data.\r\nSaving data to server\r\n - User data: Information (e.g. name, image url) required in Ranking UI\r\n - Score: Accumulated score used for ranking.\r\n - Friend list: Upload self and friend’s list data.\r\nRetrieving ranking data from server\r\n - My ranking: My ranking from all users, my ranking between friends.\r\n - All ranking: Accumulated ranking for all users, weekly all user ranking.\r\n - Friend ranking: Accumulated all users ranking, weekly friend ranking.\r\n * Weekly ranking is refreshed on Monday’s.\r\n \r\n# Documents\r\n```html\r\nAssets/RankPin/Document\r\n - RankPin_English.pdf\r\n - RankPin_Korean.pdf\r\n```\r\n\r\n# Samples\r\n- User Data Update\r\nUpdate my information on server. Unique ID is required to update.\r\nAlternatively, you can upload various information in a Hashtable format for user data.\r\n(Internally Hashtable data is converted into JSON format and size over 500 bytes will not be saved on server)\r\n```html\r\n* Reqeust.\r\nprivate void updateUser()\r\n{\r\n\tHashtable data = new Hashtable();\r\n\tdata.Add(\"name\", \"Daniel\");\r\n\tdata.Add(\"url\", “http://xxx.png“);\r\n\tthis.updateUser(data);\r\n}\r\n* Response.\r\npublic override void onSuccessUser()\r\n{\r\n\tbase.onSuccessUser();\r\n\tDebug.Log(\"Update user informations.!\");\r\n}\r\npublic override void onFailUser(string message)\r\n{\r\n\tbase.onFailUser(message);\r\n\tDebug.LogWarning(message);\r\n}\r\n```\r\n- Score Update\r\nPerform operation of updating your ranking score information onto server.\r\nScores are all ranking, weekly ranking and friend ranking data.\r\n(Score data uploads accumulated scores. Weekly rankings automatically determines current week’s score from server)\r\n```html\r\n* Reqeust.\r\nprivate void updateScore()\r\n{\r\n\tint score = 102345;\r\n\tthis.updateScore((uint)score);\r\n}\r\n* Response.\r\npublic override void onSuccessScore()\r\n{\r\n\tbase.onSuccessScore();\r\n\tDebug.Log(\"Update score.!\");\r\n}\r\npublic override void onFailScore(string message)\r\n{\r\n\tbase.onFailScore(message);\r\n\tDebug.LogWarning(\"message);\r\n}\r\n```\r\n- Update Friend List\r\nYour friend’s list must be uploaded to server in order to use friend ranking. If you are not going to use this feature, the list does not need to be uploaded.\r\nFriend’s list must update User ID of friend’s list to server in ArrayList.\r\n```html\r\n* Reqeust.\r\nprivate void updateFriends()\r\n{\r\n\tArrayList friends = new ArrayList();\r\n\tfriends.Add(\"33\");\r\n\tfriends.Add(\"367\");\r\n\tfriends.Add(\"369\");\r\n\tthis.updateFriends(friends);\r\n}\r\n* Response.\r\npublic override void onSuccessFriends()\r\n{\r\n\tbase.onSuccessFriends();\r\n\tDebug.Log(\"Update friends list.!\");\r\n}\r\npublic override void onFailFriends(string message)\r\n{\r\n\tbase.onFailFriends(message);\r\n\tDebug.LogWarning(message);\r\n}\r\n```\r\n- My Ranking\r\nRetrieves my ranking information. You can retrieve my ranking from all, weekly and friend ranking.\r\n```html\r\n* Reqeust.\r\nprivate void requestRankMe()\r\n{\r\n\tthis.rankMe(\"me\");\r\n}\r\n* Response.\r\npublic override void onSuccesMe(int total, int rank, int score, Hashtable data)\r\n{\r\n\tbase.onSuccesMe(total, rank, score, data);\r\n\tDebug.Log(string.Format(\"total:{0},rank:{1},score:{2}\",total,rank,score));\r\n}\r\npublic override void onFailMe(string message)\r\n{\r\n\tbase.onFailMe(message);\r\n\tDebug.LogWarning(message);\r\n}\r\n```\r\n- All ranking\r\nRetrieve ranking information from all users.\r\nYou can set offset and limit when retrieving ranking information.\r\noffset : Ranking offset\r\nlimit : Numbers of user’s retrieved ranking data (maximum of 50)\r\n```html\r\n* Reqeust.\r\nprivate void requestRank()\r\n{\r\n\tthis.rank(\"total\");\r\n}\r\n* Response.\r\npublic override void onSuccessRank(int total, ArrayList users)\r\n{\r\n\tbase.onSuccessRank(total, users);\r\n\tDebug.Log(string.Format(\"total:{0}\", total));\r\n\tforeach(Hashtable user in users)\r\n\t{\r\n\t\tHashtableHelper.print(\"Rank\", user);\r\n\t\tHashtable data = (Hashtable)user[RankPin.RankConstants.KEY_DATA];\r\n\t\tif(data == null)\r\n\t\t\tcontinue;\r\n\t\tHashtableHelper.print(\"Data\", data);\r\n\t}\r\n}\r\npublic override void onFailRank(string message)\r\n{\r\n\tbase.onFailRank(message);\r\n\tDebug.LogWarning(message);\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}